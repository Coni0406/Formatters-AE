# -*- coding: utf-8 -*-
"""Formatters.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tDNWe3MAvO6A1I-pOvcIBnm2SzThORvO
"""

# Instalación de los formatters
!pip install black autopep8 yapf pylint

import black

codigo = '''def  funcionDeEjemplo   ( parametro1 , parametro2 =   10  ) :
    if  parametro1  <  parametro2 :
        print ( "parametro1 es menor que parametro2" )
    for i in range ( 0 , 5 ):
        print("Iteración",i)
    return  parametro1 +   parametro2

def otroEjemplo (  a, b ,  c = [1, 2 ,3], d = { 'clave' : 'valor'  }  ) :
    if   a ==  b  :   print("Iguales")
    elif  a != b   : print (  "No Iguales" ) ;
    return c, d

funcionDeEjemplo ( 5 , 20 )
otroEjemplo (  10 , 10 ,  [1, 2, 3] , {'clave':'valor'} )'''

codigo_formateado = black.format_str(codigo, mode=black.Mode())
print(codigo_formateado)

import autopep8

codigo = '''def obtener_nombre( nombre , apellido):
    return nombre+" "+apellido

def es_igual( num1 , num2):
    if num1 == num2 :
        return True
    else :
        return False

print(obtener_nombre("Juan", "Pérez"))
print(es_igual(10, 20))'''

codigo_formateado = autopep8.fix_code(codigo)
print(codigo_formateado)

import yapf

codigo = '''
def ejemplo_error_espacios(a, b, c=10):
    if a > c:
        print("A es mayor que C")
    else:
        print("A no es mayor que C")
    return a + b
'''

codigo_formateado, _ = yapf.yapf_api.FormatCode(codigo)
print(codigo_formateado)

import subprocess
import autopep8

# Código de ejemplo que será formateado
codigo = '''
def funcionDeEjemplo(parametro1, parametro2=10):
    if parametro1 < parametro2:
        print("parametro1 es menor que parametro2")
    for i in range(0, 5):
        print("Iteración", i)
    return parametro1 + parametro2

def otroEjemplo(a, b, c=[1, 2, 3], d={'clave': 'valor'}):
    if a == b:
        print("Iguales")
    elif a != b:
        print("No Iguales")
    return c, d

funcionDeEjemplo(5, 20)
otroEjemplo(10, 10, [1, 2, 3], {'clave': 'valor'})
'''

# Usar autopep8 para formatear el código
codigo_formateado = autopep8.fix_code(codigo)

# Mostrar el código formateado
print("Código Formateado:\n")
print(codigo_formateado)

# Ejecutar pylint en el código formateado
# Como estamos usando un string en lugar de un archivo, tenemos que escribirlo a un archivo temporal
with open('codigo_temporal.py', 'w') as temp_file:
    temp_file.write(codigo_formateado)

# Ejecutar pylint sobre el archivo temporal
result = subprocess.run(['pylint', 'codigo_temporal.py'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)

# Mostrar el resultado de pylint (análisis)
print("\nResultados de pylint:\n")
print(result.stdout.decode())

# Eliminar el archivo temporal después de análisis
import os
os.remove('codigo_temporal.py')